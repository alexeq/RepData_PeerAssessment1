w^2*3+(1-w)^2*2.5+2*w*(1-w)*0.9
w*2+(1-w)*1
w=0.432
w*2+(1-w)*1
4/(1-0.6^2)
install.packages("knitr")
When you click the **Knit HTML** button a web page will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
lapply
ar1.acf = ARMAacf(ar=0.75, ma=0, lag.max=10)
plot(0:10, ar1.acf)
install.packages("KernSmooth")
load(KalmanSmooth)
library(KernSmooth)
ln(2.78)
log(2.7)
log(2.781828)
log(2.71828)
log(109.04/105.06)
log(29.49/28/64)
log(29.49/28.64)
((109.04-105.06)/105.06)
((109.04-105.06)/105.06)^12 - 1
(109.04/105.06)^12 - 1
(29.49/28.64)^12 - 1
log(109.04/105.06)
log(109.04/105.06)*12
log(29.49/28.64)
log(29.49/28.64)*12
(109.04/105.06)^12 - 1
10000*((109.04/105.06)^12 - 1)
log(29.49/28.64)*12
10000*log(29.49/28.64)*12
(29.49/28.64)^12 - 1
10000*(29.49/28.64)^12
(109.04/105.06-1)
(109.04/105.06-1)*0.2+(29.49/28.64-1)*0.8
log(1+0.03131964)
log(0.03131964)
100000*(-1.645)
0
0.001+0.05*-1.645
10000*(0.001+0.05*-1.645)
100000*(0.001+0.05*-1.645)
100000*(0.01+0.09*-1.645)
100000*(0.01*12+0.09*sqrt(12)*-1.645)
100000*(0.001*12+0.05*sqrt(12)*-1.645)
3/(1-0.45)
0.2^2/(1-0/6^2)
0.2^2/(1-0.6^2)
1.5^2/(1-0.45^2)
[1]
$1
1.5^2/(1-0.45^2)*9
2^2/(1-0.6^2)
1.5^2*0.45
1.5*0.45
1.5^2*0.45
1.5^2(1-0.45^2)
1.5^2*(1-0.45^2)
1.5^2*0.45
1.5^2*0.45-1
2.82*0.45
100000*(-1.645)
100000*(0.001+0.05*-1.645)
100000*(0.001+0.05^2*-1.645)
100000*(0.001+0.05^2*-1.645)
100000*(0.001+0.05*-1.645)
100000*(0.04+0.09*-1.645)
100000*(0.04+0.09*NORMINV(0.05))
100000*(0.04+0.09*-1.645)
exp(0.04+0.09*-1.645)
exp(0.04+0.09*-1.645)-1
exp(0.04+0.09*-1.645)-1
(0.001+0.05*-1.645)
exp(0.001+0.05*-1.645)-1
exp(0.01+0.09*-1.645)-1
100000*(exp(qnorm(0.05,mean=12*0.001,sd=(sqrt(12))*0.05))-1)
100000*(exp(qnorm(0.05,mean=12*0.01,sd=(sqrt(12))*0.09))-1)
source('~/exam_prep.r')
source('~/exam_prep.r')
x
source('~/exam_prep.r')
globalMin.portfolio
quadprog
library(quadprog)
source('C:/alex/projects/coursera/comp_fin/assignment/exam_prep.r')
source('C:/alex/projects/coursera/comp_fin/assignment/exam_prep.r')
source('C:/alex/projects/coursera/comp_fin/assignment/exam_prep.r')
source('C:/alex/projects/coursera/comp_fin/assignment/exam_prep.r')
source('C:/alex/projects/coursera/comp_fin/assignment/exam_prep.r')
source('C:/alex/projects/coursera/comp_fin/assignment/exam_prep.r')
globalMin.portfolio
source('C:/alex/projects/coursera/comp_fin/assignment/exam_prep.r')
VBLTX.prices = get.hist.quote(instrument="vbltx", start="2005-09-01",
end="2010-09-30", quote="AdjClose",
provider="yahoo", origin="1970-01-01",
compression="m", retclass="zoo")
index(VBLTX.prices) = as.yearmon(index(VBLTX.prices))
class(VBLTX.prices)
colnames(VBLTX.prices)
start(VBLTX.prices)
end(VBLTX.prices)
end(VBLTX.prices)
start(VBLTX.prices)
source('C:/alex/projects/coursera/comp_fin/assignment/exam_prep.r')
source('C:/alex/projects/coursera/comp_fin/assignment/exam_prep.r')
source('C:/alex/projects/coursera/comp_fin/assignment/exam_prep.r')
plot(lab4Returns.z, plot.type="single", lty=1:3, col=1:3, lwd=2)
legend(x="bottomleft", legend=colnames(lab4Returns.z), lty=1:3, col=1:3, lwd=2)
abline(h=0)
title("Monthly cc returns")
source('C:/alex/projects/coursera/comp_fin/assignment/exam_prep.r')
source('C:/alex/projects/coursera/comp_fin/assignment/exam_prep.r')
source('C:/alex/projects/coursera/comp_fin/assignment/exam_prep.r')
covhat.vals = cov.mat[lower.tri(cov.mat)]
source('C:/alex/projects/coursera/comp_fin/assignment/exam_prep.r', echo=TRUE)
0.43*12
5.59*12
5.59*sqrt(12)
(0)
(0.43*12-0.08*12)/(5.59*sqrt(12))
(0.43*12-0.08)/(5.59*sqrt(12))
0.49*12
2.9*sqrt(12)
(0.49*12-0.08*12)/(2.9*sqrt(12))
1/28*12
1.28*12
8.45*sqrt(12)
(1.28*12-0.08*12)/(8.45*sqrt(12))
alpha=(1-0.4)/(1.76-0.4)
alpha
mu_min=t(c(23,87,-10))
mu_min
mu_tan=t(c(-197,151,145))
alpha*mu_tan-(1-alpha)*mu_min
alpha*mu_tan+(1-alpha)*mu_min
t_bill=0.08
(1-t_bill)/(1.76-t_bill)
6.53*0.547619
mu_tan*0.55
(0.4-1.645*2.84)
(0.4-1.645*2.84)*10000
(0.4-1.645*2.84)*100000
(exp(0.4-1.645*2.84)-1)*100000
(0.004-1.645*0.0284)*100000
(exp(0.004-1.645*0.0284)-1)*100000
0.0298/(1.00139+0.0298)
q=c(23,87,-10)
beta=c(1.00139,0.16639,1.5262)
crossprod(q,beta)
R.version.string
install.packages("swirl")
library(swirl)
swirl()
list(2, TRUE)
c(12,23,4)
vector()
1:\L
1L
Inf
1L==1
1L==1.0
NaN
0/Inf
0/NaN
attributes(1)
attributes(c(1,2,3))
length(c(1,2,3))
class(c(1,2,3))
length(4
()
;
length(122)
getwd()
x <- if (3 > 1) 3 else 100
x
seq_len(11)
1..10
1:10
1:x
getwd()
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx", destfile="gas.xlsx")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx", destfile="gas1.xlsx", mode="wb")
update.packages(checkBuilt=TRUE, ask=FALSE)
update.packages(checkBuilt=TRUE, ask=FALSE)
library("lattice")
p <- xyplot(Ozone ~ Wind, data = airquality)
class(p)
library(nlme)
xyplot(weight ~ Time | Diet, BodyWeight)
xyplot(weight ~ Time | Diet, BodyWeight)
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library("ggplot2")
install.packages("ggplot2")
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality$Month
factor(airquality$Month)
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies, smooth = "loess")
install.packages("lubridate")
demo()
demo(image)
demo(persp)
demo(recursion)
install.packages("knitr")
install.packages("RColorBrewer")
round(qnorm(0.05, mean = 100, sd = 10), 3)
round(qnorm(0.05, mean = 100, sd = 10 / sqrt(50)), 3)
round(qnorm(0.95, mean = 100, sd = 10 / sqrt(50)), 3)
round(qnorm(0.05, mean = 100, sd = 10 / sqrt(50), lower.tail = TRUE), 3)
round(qnorm(0.95, mean = 100, sd = 10 / sqrt(50)), 3)
round(qnorm(0.95, mean = 100, sd = 10 / sqrt(50)), 3)
round(bprob(5), 1)
pbin(5)
dbinom(4, 6, 0.5)
pbinom(4, 6, 0.5)
pbinom(4, size = 6, prob = 0.5)
pbinom(4, size = 6, prob = 0.5, lower.tail = FALSE)
pbinom(4, size = 6, prob = 0.5, lower.tail = FALSE) * 100
punif
pnorm(70, mean = 80, sd = 10)
pnorm(80, mean = 80, sd = 10)
pnorm(110, mean = 80, sd = 10)
qnorm(0.95)
qnorm(0.95, mean = 1100, mean = 75)
qnorm(0.95, mean = 1100, sd = 75)
1100+75*1.645
qnorm(0.95, mean = 1100, sd = 75 / 100)
qnorm(0.95, mean = 1100, sd = 75 / sqrt(100)
)
pbinom(4)
pbinom(4, size=5)
pbinom(4, size=5, prob=0.5)
pbinom(4, size=5, prob=0.5, lower.tail = FALSE)
ppois(10, lambda = 5)
ppois(10, lambda = 5) * 3
ppois(10, lambda = 5)
ppois(10, lambda = 5) / 3
ppois(10, lambda = 5) / 3
ppois(10, lambda = 5)
ppois(10, lambda = 5)
ppois(10, lambda = 5) / 3
ppois(10, lambda = 5 * 3)
pbinom(4, size=5, prob=0.5, lower.tail = FALSE)
pbinom(4, size=5, prob=0.5)
pbinom(4, size=5, prob=0.5)
pbinom(4, size=5, prob=0.5, lower.tail = FALSE)
pbinom(3, size=5, prob=0.5, lower.tail = FALSE)
setwd("C:/alex/projects/coursera/data_sci/5-repdata/assignments/RepData_PeerAssessment1")
install.packages("Hmisc")
library(hMisc)
library(HMisc)
library(Hmisc)
?impute
age <- c(1,2,NA,4)
age.i <- impute(age)
# Could have used impute(age,2.5), impute(age,mean), impute(age,"random")
age.i
summary(age.i)
is.imputed(age.i)
age
age.i
age.i[1, ]
age.i[1]
age.i[2]
age.i[3]
age.i[4]
age.i[, 1]
class(age.i)
getwd()
data
dataset = read.csv("activity.csv", header = TRUE)
summary(dataset)
tapply(dataset, dataset$date, sum)
ag = aggregate(dataset, dataset$date)
ag = aggregate(dataset, dataset$date, sum)
ag = aggregate(dataset, date, sum)
ag = aggregate(dataset, c("date"), sum)
ag = aggregate(steps ~ date, data = dataset, sum)
ag
hist(ag)
hist(ag$steps, ag$date)
hist(ag$steps, breaks = ag$date)
class(ag$date)
plot(ag$steps, ag$date)
plot(ag$date, ag$steps)
plot(ag$date, ag$steps, type = 's')
plot(ag$date, ag$steps, type = 'h')
plot(ag$date, ag$steps, type = 'h')
plot(ag$date, ag$steps, type = 'l')
plot(ag$date, ag$steps, type = 'p')
plot(ag$date, ag$steps, type = 'p')
plot(ag$date, ag$steps, type = 's')
plot(ag$date, ag$steps, type = 's')
plot(ag$date, ag$steps, type = "s")
plot(ag$date, ag$steps, type = "p")
plot(ag$date, ag$steps, type = "l")
plot(ag)
ag2 = tapply(data$steps, data$date, sum)
ag2 = tapply(dataset$steps, dataset$date, sum)
ag2
ag1
ag
ag2
t(ag2)
dim(ag2)
hist(ag2, freq = FALSE)
plot(ag)
qplot(ag)
library(ggplot2)
qplot(ag)
qplot(ag)
qplot(ag$date, ag$steps)
library(lattice)
??lattice
hist(ag)
hist(ag$steps)
hist(ag$steps, breaks=20)
hist(ag$steps, breaks = 50)
hist(ag$steps, breaks = 10)
hist(ag$steps, breaks = 11)
hist(ag$steps)
hist(ag$steps, breaks = 11)
hist(ag$steps, breaks = 11, right = T)
hist(ag$steps, breaks = 11, right = T)
hist(ag$steps, breaks = 11, right = TRUE, include.lowest = TRUE)
hist(ag$steps, breaks = 10, right = TRUE, include.lowest = TRUE)
hist(ag$steps, breaks = 20, right = TRUE, include.lowest = TRUE)
hist(ag$steps, breaks = 24, right = TRUE, include.lowest = TRUE)
hist(ag$steps, breaks = 44, right = TRUE, include.lowest = TRUE)
hist(ag$steps, breaks = 5)
hist(ag$steps, breaks = 10)
hist(ag$steps, breaks = 11)
hist(ag$steps, breaks = 12)
hist(ag$steps, breaks = 13)
hist(ag$steps, breaks = 14)
hist(ag$steps, breaks = 15)
hist(ag$steps, breaks = 16)
hist(ag$steps, breaks = 10)
steps = tapply(dataset$steps, dataset$days, sum)
steps
steps = tapply(dataset$steps, dataset$date, sum)
hist(steps, breaks = 20)
mean(steps)
mean(steps, na.rm = TRUE)
median(steps, na.rm = TRUE)
average(steps, na.rm = TRUE)
stepsPerInterval = tapply(dataset$steps, dataset$interval, mean)
stepsPerInterval
stepsPerInterval = tapply(dataset$steps, as.factor(dataset$interval), mean)
stepsPerInterval
as.factor(dataset$interval)
stepsPerInterval = tapply(dataset$steps, as.factor(dataset$interval), mean)
stepsPerInterval
stepsPerInterval = tapply(dataset$steps, as.factor(dataset$interval), mean, na.rm = TRUE)
stepsPerInterval
plot(stepsPerInterval)
plot(stepsPerInterval, type="l")
stepsPerInterval[2, ]
stepsPerInterval
class(stepsPerInterval)
class(stepsPerInterval[1])
stepsPerInterval[1]
stepsPerInterval[. 1]
stepsPerInterval[, 1]
stepsPerInterval[1]
class(stepsPerInterval[1])
names(stepsPerInterval[1])
names(stepsPerInterval[2])
names(stepsPerInterval[3])
names(stepsPerInterval)
60*24/5
plot(stepsPerInterval, names(stepsPerInterval), type="l")
plot(names(stepsPerInterval), stepsPerInterval, type="l")
strptime(names(stepsPerInterval), format="%H%M")
format(names(stepsPerInterval), width=4)
format(names(stepsPerInterval), width=4, zero.print = TRUE)
prettyNum(names(stepsPerInterval), width=4, zero.print = TRUE)
formatC(names(stepsPerInterval), width=4)
formatC(names(stepsPerInterval), width=4, flag="0")
formatC(names(stepsPerInterval), width=4, flag="0")
formatC(names(stepsPerInterval)[1:10], width=4, flag="0")
formatC(names(stepsPerInterval)[1:10], width=4, flag="-0")
formatC(names(stepsPerInterval)[1:10], width=4, flag="+0")
formatC(names(stepsPerInterval)[1:10], width=4)
formatC(names(stepsPerInterval)[1:10], width=4, flag="04d")
formatC(as.numeric(names(stepsPerInterval))[1:10], width=4, flag="04d")
formatC(as.numeric(names(stepsPerInterval))[1:10], width=4, flag="0")
formatC(as.numeric(names(stepsPerInterval))[1:10], width=4)
formatC(as.numeric(names(stepsPerInterval)), width=4, flag="0")
names = formatC(as.numeric(names(stepsPerInterval)), width=4, flag="0")
names = sub("(..)(..)", "\\1:\\2", names)
names
names = sub("(..)(..)", "\\1:\\2", names)
stepsPerInterval = tapply(dataset$steps, as.factor(dataset$interval), mean, na.rm = TRUE)
names = formatC(as.numeric(names(stepsPerInterval)), width=4, flag="0")
names(stepsPerInterval) = sub("(..)(..)", "\\1:\\2", names)
plot(names(stepsPerInterval), stepsPerInterval, type="l")
axis(side = 1, labels = names)
stepsPerInterval = tapply(dataset$steps, as.factor(dataset$interval), mean, na.rm = TRUE)
names = formatC(as.numeric(names(stepsPerInterval)), width=4, flag="0")
names = sub("(..)(..)", "\\1:\\2", names)
plot(names(stepsPerInterval), stepsPerInterval, type="l", la)
stepsPerInterval = tapply(dataset$steps, as.factor(dataset$interval), mean, na.rm = TRUE)
names = formatC(as.numeric(names(stepsPerInterval)), width=4, flag="0")
names = sub("(..)(..)", "\\1:\\2", names)
plot(names(stepsPerInterval), stepsPerInterval, type="l")
axis(side = 1, labels = names)
axis(side = 1, labels = names, at = NULL)
axis(side = 1, labels = names, at = names)
plot(names, stepsPerInterval, type="l", la)
plot(names, stepsPerInterval, type="l")
plot(names, stepsPerInterval, type="l")
qplot(names, stepsPerInterval, type="l")
ggplot(names, stepsPerInterval, type="l")
plot(names, stepsPerInterval, type="l")
plot(stepsPerInterval, type="l")
q = data.frame(name = names, steps = stepsPerInterval)
q
plot(q, type="l")
plot(q, type="l")
library(graphics)
plot(q, type="l")
plot(q, type="b")
plot(q, type="h")
plot(q, type="h")
plot(q$name, q$steps, type="h")
plot(stepsPerInterval)
plot(stepsPerInterval, type="l")
plot(q, type="l")
plot(stepsPerInterval)
plot(stepsPerInterval, type="l")
stepsPerInterval = tapply(dataset$steps, as.factor(dataset$interval), mean, na.rm = TRUE)
names = formatC(as.numeric(names(stepsPerInterval)), width=4, flag="0")
names = sub("(..)(..)", "\\1:\\2", names)
plot(names(stepsPerInterval), stepsPerInterval, type="l")
plot(names(stepsPerInterval), stepsPerInterval, type="l")
plot(names, stepsPerInterval, type="l")
which.max(stepsPerInterval)
names[which.max(stepsPerInterval)]
names[which.max(stepsPerInterval):2]
names[which.max(stepsPerInterval)]
names[2]
names[2, 3]
names[2:3]
stepsPerInterval[1[1]]
stepsPerInterval[1[2]]
stepsPerInterval[1
]
stepsPerInterval[2]
stepsPerInterval[3]
stepsPerInterval[4]
plot(stepsPerInterval, type="l")
dim(stepsPerInterval)
dim(names)
length(names)
seq(0, 250, 50)
at1 = seq(0, 250, 50)
plot(stepsPerInterval, type="l")
axis(side=1, at=at1, labels=names[at1])
names[at1]
at1
at1 = seq(0, 270, 30)
at1
names[at1]
names[c(0, 30)]
names[c(0, 30, 60)]
names[c(0, 30, 60), ]
names[c(0, 30, 60)]
names[1:3]
names[c(1,2,3)]
names[c(1,2,30)]
names[c(1,30)]
names[c(1,30,60)]
at1 = seq(0, 12 * 30, 30)
at1
at1 = seq(0, 12 * 30, 60)
at1 = seq(0, 24 * 60 / 5, 60)
at1
names[at1]
at1 = seq(1, 24 * 60 / 5, 60)
names[at1]
at1
axis(side=1, at=at1, labels=names[at1])
xlabels = seq(1, 24 * 60 / 5 + 1, 36)
names[xlabels]
xlabels = seq(1, 24 * 60 / 5, 36)
xlabels
xlabels = seq(1, 24 * 60 / 5, 30)
names[xlabels]
xlabels = seq(1, 24 * 60 / 5, 24)
names[xlabels]
print(names[1])
print(names[1], names[3])
print(names[1], quote = FALSE)
